# what is the difference between Enumeration and Iteration
  Enumeration Enumeration is a legacy interface in Java that provides a way to iterate over a collection of objects, typically used with legacy collections such as Vector, Hashtable, and Stack. It has two methods: hasMoreElements() and nextElement(), and is a "pull" model where the caller has to explicitly ask for the next element.
  Iteration Iteration is a modern concept in Java that allows you to traverse a collection of objects using an Iterator, typically used with modern collections such as ArrayList, LinkedList, HashSet, and TreeSet. It has three methods: hasNext(), next(), and remove(), and is also a "pull" model where the caller has to explicitly ask for the next element.


# what is difference between primitive data Types and wrapper class in java ?
1. Primitive Data Types:
Primitive data types in Java are the most basic data types that are directly supported by the Java language. These types are not objects and are stored in memory as raw values. Java has 8 primitive data types:

benefits : 
1. Memory-efficient: They are stored directly in memory as raw values, making them fast and low-overhead.
2. No Methods: Primitive types don't have methods or properties. They are simple values.
3. Default Values: Primitive types have default values when they are declared but not initialized (e.g., 0 for numeric types, false for boolean).

2. Wrapper Classes:
Wrapper classes are object representations of the primitive data types. They allow primitive types to be treated as objects, and they are part of the java.lang package. These classes are used in situations where an object is required, such as when working with collections (like ArrayList) or using methods that require objects.
benefits: 
1. Conversion: Wrapper classes provide methods for converting between primitive types and their corresponding objects.
Example: int x = 100; Integer obj = Integer.valueOf(x); (primitive to wrapper class)
Example: int y = obj.intValue(); (wrapper class to primitive)
Nullability: While primitive types can't be null, wrapper objects can. This makes wrapper classes useful in situations where you need to represent "no value" or missing data.

2. Autoboxing and Unboxing: Java automatically converts between primitive types and their wrapper classes when needed, a feature called autoboxing and unboxing:
   Autoboxing: The automatic conversion from a primitive to its corresponding wrapper class.
   Example: Integer obj = 10; (primitive 10 is autoboxed to Integer object)
   Unboxing: The automatic conversion from a wrapper class to its corresponding primitive type.
   Example: int value = obj; (unboxing Integer to int)
3. Utility Methods: Wrapper classes often provide useful methods. For example:
   Integer.parseInt(String) for converting a string to an integer.
   Double.isNaN() for checking if a double value is NaN (Not-a-Number).

# what is the basic diff between autoboxing and unboxing ?

AutoBoxing :
 autoboxing is the process of converting the primiter datatype to its corresponding wrapper class. In simple words we are creating object version of the primitive datatype . 
Unboxing : 
unboxing is the just reverse process of autoboxing , conversion from the wrapper class object to its primitive datatype is called unboxing . In simple words conversion form object version of datatype to its primitve datatype . 

Profit & loss : 
1. simple code : autoboxing and unboxing give use simple code as  we don't have to do it manually . it reduces of overhead of conversion between two of them .
2. performance issue : conversion takes time that can reduce the performance . 
3. nullPointerExceptions : unboxing can give us null pointer exception as primitive datatypes can not hold "null" values so unboxing can give us exception.

# what volatile in java ?
volatile in java can be understood by multi-threading , let say we have to 2 threads on thread is making change on x variable and second thread is reading that variable x , now as we know each cpu has its local cache
that is used by the cpu only and if we have defined variable that is used by thread-1 in cpu-1 if that variable is modified in local cache of cpu-1 it will instantly updated inside the shared-cache that will be visible to 
thread-2 , so it can use the latest value of x whenever it will change in value . 

Key Characteristics of volatile:
Visibility Guarantee:
When a variable is declared as volatile, it guarantees that any read or write operation on that variable will always access the most recent value from the main memory. This ensures that changes made by one thread to the volatile variable are immediately visible to other threads.

No Caching:
Without volatile, threads may hold a local copy of a variable in their CPU cache, and changes made by one thread might not be reflected in other threads immediately, leading to inconsistent or stale data. With volatile, the JVM ensures that every read or write of a volatile variable goes directly to and from the main memory, bypassing the local cache.

Atomicity for Reads and Writes:
The volatile keyword ensures atomicity for reads and writes of the variable, meaning that each individual read and write operation is atomic (i.e., it is done in a single step without interference from other threads). However, volatility does not make compound actions like increment (x++) or check-then-act operations atomic. For example, the statement x++ is not thread-safe even when x is volatile.

No Locks:
A volatile variable does not introduce any locking mechanism (e.g., it doesn't use synchronized blocks). However, it ensures that all threads see a consistent value of the variable without the overhead of using locks.

# when we should use volatile ? 
volaile is can be used on simple flags or shared state that should be visible to all the threads . 
best example could be the reader and writer thread let say we have two thread that so one thread is reading second should not be write so for this purpose we can use volatile variable that will read by the reader thread 
once write will finish its operations i will update and that will be singnal to write thread . 


----------------------------
what is coupling in java ?
ans - Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. We can use interfaces for the weaker coupling because there is no concrete implementation
There are two types of coupling in java 
1. strong coupling 
2. weak coupling 

1. strong coupling -In strong coupling, one class directly uses the concrete implementation of another class, which creates a dependency between them  . 
2. weak coupling - In weak coupling, we use interfaces, which allows one class to depend on the interface rather than a concrete class. This reduces the dependency and allows for flexibility.
examples :
// Define an interface to decouple the classes
interface MessageService {
    void showMessage();
}

// Concrete implementation of MessageService
class B implements MessageService {
    @Override
    public void showMessage() {
        System.out.println("Hello from class B");
    }
}

// Class A depends on the interface, not a concrete class
class A {
    private MessageService messageService;

    // Constructor accepts any implementation of MessageService (loose coupling)
    public A(MessageService messageService) {
        this.messageService = messageService;
    }

    public void displayMessage() {
        messageService.showMessage(); // Using the interface
    }
}

public class Main {
    public static void main(String[] args) {
        MessageService b = new B(); // Could also be a different implementation
        A a = new A(b);
        a.displayMessage(); // Output: Hello from class B
    }
}
Explanation of Weak Coupling:
Interface MessageService defines the contract without specifying any concrete implementation.
Class B implements this interface and provides the actual behavior for showMessage().
Class A depends on MessageService rather than a specific class like B. This allows class A to interact with any class that implements MessageService.


--------------------
what is difference between object oriented programming and object based programming language ? 
ans - only diff between oop and obj oriented programming is inheritance , 
javascript and vb 

----------------------
Why use inheritance in Java?

For Method Overriding (so runtime polymorphism can be achieved).
For Code Reusability.

--------------------------

Types of Inheritance in Java
On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.

In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later.

----------------------------

Benefits of Inheritance
Polymorphism: Subclasses can override superclass methods, allowing for polymorphic behavior, where methods can behave differently based on the object type at runtime.


-------------------
Best Practices for Using Inheritance
While inheritance is a powerful tool, its misuse can lead to code complexity and tight coupling. Here are some best practices to consider:

Favor Composition Over Inheritance: When possible, prefer composition, where classes are composed of other classes, over inheritance. This approach often leads to more flexible and maintainable code.

Follow the "is-a" Relationship: Ensure that inheritance relationships adhere to the "is-a" principle, where a subclass represents a more specialized version of its superclass.

Use Abstract Classes and Interfaces Wisely: Abstract classes and interfaces provide blueprints for subclasses. Use abstract classes when you want to provide a default implementation or share code among related subclasses. Use interfaces to define contracts that classes can implement, enabling multiple inheritance through interfaces.

Avoid Deep Inheritance Hierarchies: Deep inheritance hierarchies can make code difficult to understand and maintain. Aim for shallow hierarchies whenever possible.

Prefer Composition for Code Reuse: Instead of relying solely on inheritance for code reuse, consider using composition alongside inheritance to achieve better flexibility and modularity.


-----------------------------
Aggregation in Java
If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.

Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc.

When use Aggregation?
Code reuse is also best achieved by aggregation when there is no is-a relationship.
Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.

----------------------

Q) Why Method Overloading is not possible by changing the return type of method only?
Method overloading in Java is based on the method signature, which includes the method name and parameter list. The return type alone is not sufficient to distinguish between overloaded methods because Java does not consider the return type 
when resolving method calls. If two methods have the same name and parameter list but different return types, the compiler cannot determine which method to call based solely on the return type. Let's see how ambiguity may occur:

--------------------------
Q) can we overload the main method in java ??
Ans ) -> yes overloading the main method is posssible in java , you have can have multiple main method with the same name "main" but different argument , but when you run the program only the main method with signature 
" public static void main(String []args) " will be called first ..
-------------------
Q) what is type promotion in java ??
Ans -> TypePromotion is inbuild feature of java when One type is promoted to another implicitly if no matching datatype is found. 
let say we have a funtion to sum the two interger but when we call that function with char dataType it will automatically convert char into int dataType . this is called type promoton . Type promotion only happens from
lower datatype to higher dataType ..
--------------------
Q) What is the best example of method overriding ?
ans -> let say for any app there are two types of customer one is normal user and one is preminum user . So for any purchase you want to give some discount to your preminum user so that they get more benefit so in order to 
do that we can override the offer method that is already present inside the user method and apply extra n% of discount to them . 
---------------------
Q) Can we override the static method?
No, a static method cannot be overridden in Java. When a subclass defines a static method with the same signature as a static method in its superclass, it is simply hiding the superclass method, not overriding it. 
This means that the method invoked is determined at compile time based on the reference type, not at runtime based on the object's type. Therefore, static methods do not exhibit polymorphic behavior like instance methods
do.
-------------------------
Q) Why can we not override static method?
Because static methods in Java are linked to the class itself rather than any specific instance of the class, we are unable to override them. Java's dynamic dispatch mechanism, which determines the 
method to be called at runtime depending on the object's actual type, forms the foundation for method overriding.
Static methods cannot be overridden in the same manner as instance methods since they are not subject to dynamic dispatch because they are resolved at compile time based on the reference type and are part of the class.
Furthermore, while instance methods are kept in the object's heap area and are specific to each instance of the class, static methods are kept in the method region of the JVM's memory,
which is shared by all instances of the class. Static methods cannot be altered due to the basic differences in their behaviour and memory allocation between instance and static methods.
------------
Q) Can we override Java main() method?
No, because the Java main() method is designated as static, we are unable to override it.
---------------------
Q) Java Access Modifiers with Method Overriding
If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.
-------------------------------
Q) Rules for Java Method Overridingh2h3>
Same Method Name: The overriding method in the subclass must have the same name as the method in the superclass that it is overriding.
Same Parameters: The overriding method must have the same number and types of parameters as the method in the superclass. This ensures compatibility and consistency with the method signature defined in the superclass.
IS-A Relationship (Inheritance): Method overriding requires an IS-A relationship between the subclass and the superclass. This means that the subclass must inherit from the superclass, either directly or indirectly, to override its methods.
Same Return Type or Covariant Return Type: The return type of the overriding method can be the same as the return type of the overridden method in the superclass, or it can be a subtype of the return type in the superclass. This is known as the covariant return type, introduced in Java 5.
Access Modifier Restrictions: The access modifier of the overriding method must be the same as or less restrictive than the access modifier of the overridden method in the superclass. Specifically, a method declared as public in the superclass can be overridden as public or protected but not as private. Similarly, a method declared as protected in the superclass can be overridden as protected or public but not as private. A method declared as default (package-private) in the superclass can be overridden with default, protected, or public, but not as private.
No Final Methods: Methods declared as final in the superclass cannot be overridden in the subclass. This is because final methods cannot be modified or extended.
No Static Methods: Static methods in Java are resolved at compile time and cannot be overridden. Instead, they are hidden in the subclass if a method with the same signature is defined in the subclass.
